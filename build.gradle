/*
 *
 *  Copyright Â© 2017-2019  Kynetics  LLC
 *
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.



buildscript {
    ext{
        kotlin_version = '1.3.41'
    }
    repositories {
        google()
        jcenter()
        mavenLocal()
    }

    dependencies {
        //With newer versions of android build tools the sync process fails
        //https://github.com/anggrayudi/android-hidden-api/issues/46
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id "kotlinx-serialization" version "1.3.41" apply true
    id "io.gitlab.arturbosch.detekt" version "1.0.0-RC16"
    // ... another plugins
}

apply from: 'gradle/grgit.gradle'

detekt {
    toolVersion = "1.0.0-RC16"
    input = files("$projectDir")
    filters = ".*/resources/.*,.*/build/.*"
}

ext{
    //dependencies
    supportLibraryVersion = '28.0.0'

}

allprojects {
    apply from: "$rootDir/ktlint.gradle"

    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task copyClientSideGitHooks(type:Copy, group: "git-hooks"){
    description 'Copies the git hooks from git-hooks to the .git folder.'
    doFirst{
        project.fileTree("git-hooks").visit { FileVisitDetails details ->
            if(details.name.endsWith(".sh")){
                def name = details.name.substring(0, details.name.lastIndexOf(".sh"))
                def file = file("${projectDir}/.git/hooks/${name}")
                if(file.exists()){
                    ant.fail("${file.path} file already exists")
                }
            }

        }
    }
    from("${rootDir}/git-hooks/") {
        include '**/*.sh'
        rename '(.*).sh', '$1'
    }
    into "${rootDir}/.git/hooks"
    outputs.upToDateWhen { false }
}

task installClientSideGitHooks(type: Exec, group: "git-hooks") {
    description 'Installs the client-side git hooks'
    commandLine 'chmod'
    args '-R', '+x', '.git/hooks/'
    dependsOn copyClientSideGitHooks
    doLast {
        println('Git hook installed successfully.')
    }
}